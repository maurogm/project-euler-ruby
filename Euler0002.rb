#cd /media/Datos/Mauro/Ruby/Euler


a =	0
b =	1
c =	1
par =	2
suma =	0

while c < 4000000 do
	a = 	b
	b = 	c
	c = 	a+b
	par =	(par+1)%3 		# Si par es 1 o 2, el término es impar. Si es 0 es par
	if par==0
		suma += c
	end
	if c>4000000
		puts a
		puts b
		puts c
	end
end


puts suma


__END__




ENUNCIADO DEL PROBLEMA:


Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.



EXPLICACIÓN DE LA RESOLUCIÓN:

Con a, b y c voy llevando cuenta de los últimos 3 términos, que es lo único que necesito.

Como la sucesión de Fibonacci alterna un par cada dos impares, no necesito chequear todo el tiempo si c es par o no: basta con llevar la cuenta gracias a la variable "par".
	Hago esto porque asumo que es mucho más fácil calcular cuánto es 2 módulo 3 que fijarse si 3524578 es par o no.
