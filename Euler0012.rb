#cd /media/Datos/Mauro/Ruby/Euler



# I copy the decomposition function from Problem 5:
def decomposition(integer)
	#I shall put the factors as keys and the powers as values of a Hash
	factors = Hash[]
	if integer == 1 	#This is to avoid the pathological case of n=1
		factors[1]=1
		return factors
	end
	n=2
	while n <= integer
		if integer%n == 0
			if factors.member?(n) #If I had divided by n before, I add 1 to the power's value
				factors[n] += 1
			else
				factors[n] = 1 	#I this is the first time I'm dividing by n, I add it to the Hash, con power = 1
			end
			integer = integer / n
			if integer == 1 			#If the integer is 1, it's because I have alredy divided him by all his of his factors
				return factors
			end
		else
			n += 1
		end
	end
end

# If integer = p1^n1 + p2^n2 + ... + pm^nm, then the total quantity of divisors of 
# integer is equal to (n1+1)*(n2+1)*...*(nm+1)
def quantity_of_divisors(integer)
	powers = dec(integer).values
	quantity_of_divisors = powers.inject(1) {|acum, exp| acum*(exp+1)}
end


def first_triangle_with_n_divisors(n)
	t=0
	m=1
	while 1 < 2
		t = t+m
		m+=1
		return t if quantity_of_divisors(t) > n
	end
end

puts first_triangle_with_n_divisors(500)


__END__




ENUNCIADO DEL PROBLEMA:


The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?



