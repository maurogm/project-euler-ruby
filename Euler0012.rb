#cd /media/Datos/Mauro/Ruby/Euler



class Integer
  # I copy the decomposition function from Problem 5:
  def decomposition
    #I shall put the factors as keys and the powers as values of a Hash
    decomposition = Hash[]
    if self == 1 #This is to avoid the pathological case of n=1
      decomposition[1] = 1
      return decomposition
    end
    n=2
    integer = self
    until integer == 1
      if integer % n == 0
        decomposition[n] = decomposition.member?(n) ? decomposition[n] +1 : 1
        integer /= n
      else
        n += 1
      end
    end
    return decomposition
  end

  # If integer = p1^n1 + p2^n2 + ... + pm^nm, then the total quantity of divisors of 
  # integer is equal to (n1+1)*(n2+1)*...*(nm+1)
  def quantity_of_divisors
    powers = self.decomposition.values
    quantity_of_divisors = powers.reduce(1) {|acum, power| acum * (power + 1)}
  end

  def first_triangle_with_n_divisors
    t = 0
    m = 1
    loop do
      t = t + m
      m += 1
      return t if t.quantity_of_divisors > self
    end
  end
end

puts 500.first_triangle_with_n_divisors


__END__




ENUNCIADO DEL PROBLEMA:


The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?



